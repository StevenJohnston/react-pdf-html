{"version":3,"file":"resolveCssFile.js","sourceRoot":"","sources":["../src/resolveCssFile.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport url from 'url';\nimport path from 'path';\nimport fetch from 'sync-fetch';\n\nconst createCache = ({ limit = 100 } = {}) => {\n  let cache: Record<string, any> = {};\n  let keys: string[] = [];\n\n  return {\n    get: (key: string) => cache[key],\n    set: (key: string, value: any) => {\n      keys.push(key);\n      if (keys.length > limit) {\n        delete cache[keys.shift() as string];\n      }\n      cache[key] = value;\n    },\n    reset: () => {\n      cache = {};\n      keys = [];\n    },\n    length: () => keys.length,\n  };\n};\n\nexport const CSS_CACHE = createCache({ limit: 30 });\n\nconst getAbsoluteLocalPath = (src: string) => {\n  // if (BROWSER) {\n  //   throw new Error('Cannot check local paths in client-side environment');\n  // }\n\n  const {\n    protocol,\n    auth,\n    host,\n    port,\n    hostname,\n    path: pathname,\n  } = url.parse(src);\n  const absolutePath = path.resolve(pathname as string);\n  if ((protocol && protocol !== 'file:') || auth || host || port || hostname) {\n    return undefined;\n  }\n  return absolutePath;\n};\n\nconst fetchLocalFile = (src: string): string => {\n  // if (BROWSER) {\n  //   throw new Error('Cannot fetch local file in this environment');\n  // }\n\n  const absolutePath = getAbsoluteLocalPath(src);\n  if (!absolutePath) {\n    throw new Error(`Cannot fetch non-local path: ${src}`);\n  }\n  return fs.readFileSync(absolutePath, { encoding: 'utf8', flag: 'r' });\n};\n\nconst fetchRemoteFile = (\n  uri: string,\n  options: Parameters<typeof fetch>['1']\n): string => {\n  const response = fetch(uri, options);\n\n  return response.text();\n};\n\nconst resolveImageFromUrl = (\n  src: string,\n  crossOrigin: 'anonymous' | 'use-credentials' = 'anonymous'\n) => {\n  return getAbsoluteLocalPath(src)\n    ? fetchLocalFile(src)\n    : fetchRemoteFile(src, {\n        method: 'GET',\n      });\n};\n\nconst resolveCssFile = (\n  src: string,\n  crossOrigin: 'anonymous' | 'use-credentials' = 'anonymous',\n  cache = true\n) => {\n  let image;\n\n  if (cache && CSS_CACHE.get(src)) {\n    return CSS_CACHE.get(src);\n  } else {\n    image = resolveImageFromUrl(src, crossOrigin);\n  }\n\n  if (!image) {\n    throw new Error('Cannot resolve image');\n  }\n\n  if (cache) {\n    CSS_CACHE.set(src, image);\n  }\n\n  return image;\n};\n\nexport default resolveCssFile;\n"]}